<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Timer</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: rgb(0, 0, 0);
            margin: 0;
            color: white;
            font-family: Arial, sans-serif;
            flex-direction: column;
            user-select: none; /* Prevent text selection */
            overflow: hidden; /* Prevent overflow */
        }
        .timer {
            font-size: 3em;
            margin-bottom: 20px;
            color: white;
            position: relative;
        }
        .buttons, .time-settings {
            display: flex;
            gap: 20px; /* Added space between buttons */
            transition: opacity 0.5s;
        }
        .buttons button, .time-settings select {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: white;
            color: #282c34;
        }
        .buttons button:hover, .time-settings select:hover {
            background-color: #e0e0e0;
        }

        /* Fullscreen styles */
        .fullscreen-timer {
            position: fixed;
            width: 100vw;
            height: 100vh;
            top: 0;
            left: 0;
            background: black;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            visibility: hidden; /* Initially hide fullscreen timer */
            opacity: 0;
            transition: visibility 0s, opacity 0.5s;
        }

        .fullscreen-timer.active {
            visibility: visible;
            opacity: 1;
        }

        .fullscreen-timer .timer {
            font-size: 8em; /* Increased font size for full screen */
            color: white;
        }

        .fullscreen-timer .buttons,
        .fullscreen-timer .time-settings {
            display: none; /* Hide controls in fullscreen mode */
        }
    </style>
</head>
<body>
    <div class="timer" id="timer">00:00:00</div>
    <div class="time-settings">
        <select id="timeSelect">
            <option value="60">1 Minute</option>
            <option value="300">5 Minutes</option>
            <option value="600">10 Minutes</option>
            <option value="3600">1 Hour</option>
            <option value="7200">2 Hours</option>
            <option value="10800">3 Hours</option>
            <option value="14400">4 Hours</option>
            <option value="18000">5 Hours</option>
            <option value="21600">6 Hours</option>
            <option value="43200">12 Hours</option>
            <option value="86400">24 Hours</option>
        </select>
    </div>
    <div class="buttons">
        <button onclick="startTimer()">Start</button>
        <button onclick="stopTimer()">Stop</button>
        <button onclick="resetTimer()">Reset</button>
        <button onclick="toggleFullScreen()">Full Screen</button>
    </div>

    <div class="fullscreen-timer" id="fullscreenTimer">
        <div class="timer">00:00:00</div>
    </div>

    <script>
        let timerInterval;
        let totalSeconds = 0;
        let remainingSeconds = 0;
        let screenLock;
        let audioContext;
        let oscillator;
        const buttonsContainer = document.querySelector('.buttons');
        const timeSettingsContainer = document.querySelector('.time-settings');
        const timerElement = document.getElementById('timer');
        const fullscreenTimerElement = document.getElementById('fullscreenTimer');

        document.getElementById('timeSelect').addEventListener('change', function() {
            setTimer(parseInt(this.value));
        });

        function setTimer(seconds) {
            totalSeconds = seconds;
            remainingSeconds = seconds;
            displayTime();
        }

        function startTimer() {
            if (timerInterval) return;
            timerInterval = setInterval(() => {
                if (remainingSeconds <= 0) {
                    clearInterval(timerInterval);
                    alert('Time is up!');
                    playSound();
                    vibrateDevice();
                    return;
                }
                remainingSeconds--;
                displayTime();
            }, 1000);
            startScreenLock();
        }

        function stopTimer() {
            clearInterval(timerInterval);
            timerInterval = null;
            stopScreenLock();
        }

        function resetTimer() {
            stopTimer();
            remainingSeconds = totalSeconds;
            displayTime();
        }

        function displayTime() {
            const hours = Math.floor(remainingSeconds / 3600);
            const minutes = Math.floor((remainingSeconds % 3600) / 60);
            const seconds = remainingSeconds % 60;

            timerElement.textContent = 
                `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

            fullscreenTimerElement.querySelector('.timer').textContent = 
                `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        function hideControls() {
            buttonsContainer.style.opacity = 0;
            timeSettingsContainer.style.opacity = 0;
        }

        function showControls() {
            buttonsContainer.style.opacity = 1;
            timeSettingsContainer.style.opacity = 1;
        }

        let hideTimeout;

        function resetHideTimeout() {
            clearTimeout(hideTimeout);
            showControls();
            hideTimeout = setTimeout(hideControls, 5000);
        }

        document.body.addEventListener('click', resetHideTimeout);
        document.body.addEventListener('touchstart', resetHideTimeout);

        resetHideTimeout(); // Initialize the timeout to hide controls after 5 seconds

        // Move timer to prevent screen burn
        function moveTimer() {
            const x = Math.random() * 20 - 10; // Random movement within a range
            const y = Math.random() * 20 - 10;
            timerElement.style.transform = `translate(${x}px, ${y}px)`;
        }

        setInterval(moveTimer, 10000); // Move the timer every 10 seconds

        // Prevent screen from sleeping
        async function startScreenLock() {
            if ('wakeLock' in navigator) {
                try {
                    screenLock = await navigator.wakeLock.request('screen');
                    console.log('Screen Wake Lock acquired');
                } catch (err) {
                    console.error('Screen Wake Lock failed:', err);
                }
            } else {
                console.warn('Wake Lock API not supported');
            }
        }

        function stopScreenLock() {
            if (screenLock) {
                screenLock.release()
                    .then(() => {
                        screenLock = null;
                        console.log('Screen Wake Lock released');
                    });
            }
        }

        // Full screen functionality
        function toggleFullScreen() {
            const elem = document.documentElement;
            if (!document.fullscreenElement) {
                if (elem.requestFullscreen) {
                    elem.requestFullscreen().catch(err => {
                        console.log(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                    });
                } else if (elem.webkitRequestFullscreen) { /* Safari */
                    elem.webkitRequestFullscreen().catch(err => {
                        console.log(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                    });
                } else if (elem.msRequestFullscreen) { /* IE11 */
                    elem.msRequestFullscreen().catch(err => {
                        console.log(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                    });
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.webkitExitFullscreen) { /* Safari */
                    document.webkitExitFullscreen();
                } else if (document.msExitFullscreen) { /* IE11 */
                    document.msExitFullscreen();
                }
            }
        }

        // Play sound on timer completion
        function playSound() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            oscillator = audioContext.createOscillator();
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(440, audioContext.currentTime); // A4 note
            oscillator.connect(audioContext.destination);
            oscillator.start();
            setTimeout(() => {
                oscillator.stop();
                oscillator.disconnect();
            }, 1000); // Play for 1 second
        }

        // Vibrate on timer completion
        function vibrateDevice() {
            if (navigator.vibrate) {
                navigator.vibrate([200, 100, 200]); // Vibrate pattern
            }
        }
    </script>
</body>
</html>
